#ifndef LOWER_LEVEL_BPLUSTREE_FUNCTIONS_H
#define LOWER_LEVEL_BPLUSTREE_FUNCTIONS_H
#include <vector>
#include <cassert>
#include <iostream>
using namespace std;

template <class T>
int index_of_maximal(T data[ ], int n) {                //return index of the largest item in data
    assert(n>=0);
    int max = INT_MIN;
    int index = 0;
    for(int i=0; i < n ; i++)
    {
        if(data[i] >max )
        {
            index = i;
            max = data[i];
        }
    }
    return index;
}
template <class T>
int first_ge(const T data[ ], int n, const T& entry){   //return the first element in data that is //not less than entry
    assert(n>=0);
    for(int i = 0 ; i<n ; ++i)
        if( entry <= data[i] ) return i;
    return n;
}

template <class T>
void attach_item(T data[ ], int& n, const T& entry){    //append entry to the right of data
    assert(n>=0);
    data[n] = entry; n++;
}
template <class T>
void insert_item(T data[ ], int i, int& n, T entry){   //insert entry at index i in data
    assert(n>=0);
    assert(i>=0);
    for(int k = n; k > i ; k--)
        data[k]=data[k-1];
    n++;
    data[i] = entry;
}
template <class T>
void ordered_insert(T data[ ], int& n, T entry){        //insert entry into the sorted array   //data with length n
    assert(n>=0);
    int i= first_ge(data,n,entry);
    assert(i<=n);
    insert_item(data,i,n,entry);
}
template <class T>
void detach_item(T data[ ], int& n, T& entry){          //remove the last element in data and place  //it in entry
    assert(n>0);
    entry = data[n-1];
    --n;
}
template <class T>
void delete_item(T data[ ], int i, int& n, T& entry){   //delete item at index i and place it in entry
    assert(n>0);
    assert(i>=0 && i < n);
    entry = data[i];
    for(int k = i ; k < n ; k++)
       {
        data[k]=data[k+1];
    }
        n--;
}
template <class T>
void print_array(const T data[], int n){  //print array data
    assert(n>=0);
    for(int i = 0; i <n ; i++)
        cout<<"["<<data[i]<<"]";
}
template <class T>
void merge(T data1[ ], int& n1, T data2[ ], int& n2){   //append data2 to the right of data1
    assert(n1>=0);
    assert(n2>=0);
    int i = 0 ;
    while(n2 > 0){
        attach_item(data1,n1,data2[i]);
        i++,n2--;
    }
    assert(n1>=0 && n2==0);
}
template <class T>
void split(T data1[ ], int& n1, T data2[ ], int& n2){  //move n/2 elements from the right of data1      //and move to data2
    assert(n1>=0);
    assert(n2>=0);
    int j = 0;
    for(int i = (n1+1)/2; i<n1;i++,j++){
        data2[j] = data1[i];
    }
    n2 = j;
    n1-=n2;
}
template <class T>
void copy_array(T dest[], int &destsize,const T src[],const int & size){
    //assert(!destsize);
    assert(size>=0);
    destsize = size;
    for(int i = 0; i <size ; i++)
        dest[i] = src[i];
}
template <class T>
bool is_gt(const T data[], int n, const T& item){      //item > all data[i]
    assert(n>=0);
    for(int i = 0; i < n ; i++)
        if(item <= data[i]) return false;
    return true;
    //warning not tested warning warning warning
}
template <class T>
bool is_le(const T data[], int n, const T& item){       //item <= all data[i]
    assert(n>=0);
    for(int i = 0 ; i < n ; i++)
        if(item > data[i]) return false;
    return true;
}
template <typename T>
bool verify_sorted_array(const T data[ ], int n){
    for(int i = 1; i < n ; i++)
        if(data[i] < data[i -1 ])
            return false;
    return true;
}
//-------------- Vector Extra operators: ---------------------

template <typename T>
ostream& operator <<(ostream& outs, const vector<T>& list){ //print vector list
    for(int i = 0 ; i < list.size() ; i++)
        cout<<"["<<list[ i ]<<"] ";
    return outs;
}
template <typename T>
vector<T> operator +(const vector<T>& left, const vector<T> & right){ //ilst.push_back addme
    //push all this shit from the right to copy of left and return
    vector<T> sum = left;
    for(int i = 0 ; i <right.size() ; i++)
        sum.push_back(right[i]);
    return sum;
}
template <typename T, typename U>
vector<T>& operator +=(vector<T>& list, const U& addme){ //ilst.push_back addme
    list.push_back(addme);
    return list;
}
template <typename T>
vector<T>& operator +=(vector<T>& list, const vector<T>& other){ //ilst.push_back addme
    for(int i = 0 ; i < other.size() ; i++)
        list.push_back(other[ i ]);
    return list;
}

//-------- -------- -------- -------- -------- -------- -------- -------- -------- --------
//-------- -------- -------- -------- -------- -------- -------- -------- -------- --------


#endif // LOWER_LEVEL_BPLUSTREE_FUNCTIONS_H
